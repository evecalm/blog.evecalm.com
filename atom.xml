<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏影の博客</title>
  <icon>https://blog.evecalm.com/assets/images/favicon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.evecalm.com/"/>
  <updated>2020-06-22T10:01:11.704Z</updated>
  <id>https://blog.evecalm.com/</id>
  
  <author>
    <name>Saiya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[学习笔记]如何获取图片上某个像素点的颜色值</title>
    <link href="https://blog.evecalm.com/2020/06/get-color-from-image.html"/>
    <id>https://blog.evecalm.com/2020/06/get-color-from-image.html</id>
    <published>2020-06-22T08:51:34.000Z</published>
    <updated>2020-06-22T10:01:11.704Z</updated>
    
    <content type="html"><![CDATA[<p>最近浏览 product hunt 时, 发现一个有趣的网站 <a href="https://colorcopypaste.app/" target="_blank" rel="noopener">color copy paste</a>: 在首页的图片上, 可以直接点击取色. 这又勾起了我的好奇心: 在网页上如何取到图片像素点的颜色呢?</p><p>一番搜索后, 发现了一个神奇的API: Canvas 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData" target="_blank" rel="noopener"><code>context.getImageData(x, y, width, height)</code></a> 可用于获取图片的像素信息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">const</span> context = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"><span class="comment">// 假设页面存在ID为 target-image 的图片</span></span><br><span class="line"><span class="keyword">const</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#target-image'</span>)</span><br><span class="line"><span class="comment">// 使用图片的原始宽高作为画布的宽高</span></span><br><span class="line">canvas.width = image.naturalWidth</span><br><span class="line">canvas.height = image.naturalHeight</span><br><span class="line">context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取图片左上角第一个像素的信息</span></span><br><span class="line"><span class="keyword">const</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(imageData)</span><br><span class="line"><span class="comment">// 以下为示例输出结果</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   data: [255, 0, 0, 255], // 像素信息</span></span><br><span class="line"><span class="comment">//   height: 1,</span></span><br><span class="line"><span class="comment">//   width: 1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>由上述例子可见, 一个像素点由四个数字描述, 分别为 <code>r</code> <code>g</code> <code>b</code> <code>a</code>, <code>a</code> 为 255 则表示完全不透明即 alpha 通道值为 255/255 = 1.</p><h2 id="如何计算图片平均颜色"><a href="#如何计算图片平均颜色" class="headerlink" title="如何计算图片平均颜色"></a>如何计算图片平均颜色</h2><p>有时候我们需要知道图片的平均颜色, 用于产生对应的占位缩略图, 抑或有其他目的. 计算平均颜色的思路很简单: 分别统计每个像素点的 <code>r</code> <code>g</code> <code>b</code> <code>a</code> 的总值, 再除以像素个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接上边的示例代码</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line"><span class="keyword">const</span> imagePixelData = imageData.data</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pixelCount = imagePixelData.length / <span class="number">4</span></span><br><span class="line"><span class="keyword">const</span> averRgba = &#123;<span class="attr">r</span>: <span class="number">0</span>, <span class="attr">g</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">0</span>, <span class="attr">a</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixelCount; ++i) &#123;</span><br><span class="line">  <span class="keyword">let</span> idx = i * <span class="number">4</span></span><br><span class="line">  averRgba.r += imagePixelData[idx]</span><br><span class="line">  averRgba.g += imagePixelData[idx + <span class="number">1</span>]</span><br><span class="line">  averRgba.b += imagePixelData[idx + <span class="number">2</span>]</span><br><span class="line">  averRgba.a += imagePixelData[idx + <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">averRgba.r = <span class="built_in">Math</span>.floor(averRgba.r / pixelCount)</span><br><span class="line">averRgba.g = <span class="built_in">Math</span>.floor(averRgba.g / pixelCount)</span><br><span class="line">averRgba.b = <span class="built_in">Math</span>.floor(averRgba.b / pixelCount)</span><br><span class="line">averRgba.a = <span class="built_in">Math</span>.floor(averRgba.a / pixelCount)</span><br><span class="line"></span><br><span class="line"><span class="comment">// css 颜色值</span></span><br><span class="line"><span class="keyword">const</span> cssColor = <span class="string">`rgba(<span class="subst">$&#123;averRgba.r&#125;</span>, <span class="subst">$&#123;averRgba.g&#125;</span>, <span class="subst">$&#123;averRgba.b&#125;</span>, <span class="subst">$&#123;averRgba.a <span class="regexp">/ 255&#125;)`</span></span></span></span><br></pre></td></tr></table></figure><h2 id="如何获取跨域图片的颜色信息"><a href="#如何获取跨域图片的颜色信息" class="headerlink" title="如何获取跨域图片的颜色信息"></a>如何获取跨域图片的颜色信息</h2><p>由于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_enabled_image" target="_blank" rel="noopener">浏览器的安全策略</a>, 在不经过特殊处理时, canvas 是无法加载跨域图片资源的. 图片资源所在的服务器必须<a href="https://enable-cors.org/server.html" target="_blank" rel="noopener">允许跨域请求</a>方可被 canvas 加载</p><h2 id="使用前端技术获取网页上任意位置的颜色"><a href="#使用前端技术获取网页上任意位置的颜色" class="headerlink" title="使用前端技术获取网页上任意位置的颜色"></a>使用前端技术获取网页上任意位置的颜色</h2><p>我想到两个思路, 但都不完美:</p><ol><li>使用库<a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">html2canvas</a> 将网页转化为画布, 再使用上述方法取颜色值. 但这个库对于复杂网页转化有问题, 会出现转换出来的画布样式错误, 视频标签不支持, 图片跨域问题也无法解决</li><li>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentOrShadowRoot/elementFromPoint" target="_blank" rel="noopener"><code>document.elementFromPoint(x, y)</code></a> 获取坐标对应的dom元素, 在使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle" target="_blank" rel="noopener"><code>window.getComputedStyle(element)</code></a> 获取元素实际渲染的样式, 再取背景色或文字颜色. 这个方法就错更远了: 首先 <code>elementFromPoint</code> 取到的可能是透明蒙层元素; 再次 <code>getComputedStyle</code> 拿到样式后也无法确定应该取文字颜色还是背景色, 遇到颜色渐变的束手无策; 最后 对 图片、视频、画布等复杂标签同样无法处理</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近浏览 product hunt 时, 发现一个有趣的网站 &lt;a href=&quot;https://colorcopypaste.app/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;color copy paste&lt;/a&gt;: 在首页的图片上, 可以直接点击
      
    
    </summary>
    
    
      <category term="知识分享" scheme="https://blog.evecalm.com/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="颜色" scheme="https://blog.evecalm.com/tags/%E9%A2%9C%E8%89%B2/"/>
    
      <category term="画布" scheme="https://blog.evecalm.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>[知识分享]关于字体及字符的小思考</title>
    <link href="https://blog.evecalm.com/2020/05/about-font-and-character.html"/>
    <id>https://blog.evecalm.com/2020/05/about-font-and-character.html</id>
    <published>2020-05-17T07:55:42.000Z</published>
    <updated>2020-08-25T16:33:21.217Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发小软件的时候, 发现两个有意思的问题:</p><ol><li>如何让时间表示形式 <code>aa:bb</code> 中的 <code>:</code> 垂直居中显示</li><li>在一个300px的容器中显示10个字符, 如何设置字体大小, 使得字体正好填满容器空间</li></ol><h2 id="连字"><a href="#连字" class="headerlink" title="连字"></a>连字</h2><p>针对第一个问题, 很容想到的就是使用自定义元素绘制两个垂直居中的点, 但是略显麻烦, 且不能利用字体的特性(大小/颜色/行高等). 于是还是想通过字符实现, 因为在 unicode 中有大量字符, 一般的标点字符都有多种变体以适用于不同场景, 总有一款能适合我的吧. </p><p>查阅<a href="https://en.wikipedia.org/wiki/Colon_(punctuation)#Computing" target="_blank" rel="noopener">百科</a>发现, 冒号的确有十多种变体, 如宽度不一样的, 形状奇特的, 位置有偏移的, 等等. 可没有一个符号满足我的这个简单需求. 在尝试中, 偶然发现, 冒号两边是数字时, 冒号自然就垂直居中了, 如下图所示</p><p><img src="https://yqlgmg.bn.files.1drv.com/y4mRDAovIeNXMjZ4D6PHmHqwOw0Yu8WcnbjXSaVHJ7AyvKXFNA47Dh7BbS-0-1H95FfZKWbeZyOXoCakLXn34nI5SMcCDPt-aC17Z4UL4UYcosFJQM6BYMzRvimXKfF9HH78xO5hc4cTAyBznTVDiKHhCCQH_liabO4lc8NanghuZJgBk83TjwcMCuyPziG0yoQ3C0rUCd2uKyDh0eBh-SElg" alt="time-colon"></p><p>(如果你想自己验证该现象, 可以在最新的macOS 上安装最新版钉钉, 在输入框中输入上述文字即可)</p><p>一切就豁然开朗了, 这就是<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E5%AD%97" target="_blank" rel="noopener">连字</a> 现象, 不禁觉得苹果用户体验做的很好, 极大的缓解了强迫症症状.</p><p>连字就是将两个及以上字符合成一个字符, 连字需要在下述两种条件均满足时才会显示出效果.</p><ul><li>需要字体支持(至于哪些字符支持连字, 由字体自己控制)</li><li>需要文字渲染引擎支持连字, 操作系统均已支持连字, 但是部分软件可能会将连字功能关闭. 前端Web开发中可以使用css属性 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures" target="_blank" rel="noopener">font-variant-ligatures</a> 控制是否启用连字.</li></ul><h3 id="编程字体"><a href="#编程字体" class="headerlink" title="编程字体"></a>编程字体</h3><p>连字的应用其实非常普遍, 对程序员来说影响最大的就是一些编程专用字体了. 所谓编程字体, 就是:</p><ul><li>将一些不容易区分的字符(如0oOLIil等)显著区分开</li><li>借助连字特性, 将一些常用的符号组合(如 =&gt;, !=, ==, ===) 合成一个符号提供可读性</li><li>适当调整不同字符之间的间距, 使其容易阅读识别</li></ul><p><img src="https://bn1305files.storage.live.com/y4mXcm-u8WWUgw1rDHJZjoBPc6nj3wXvJAO59wIu2ZE4FSCrKfPXAbVittLHpZyiebyqYChqqAo5IrSIUJEfM31jDVsD4U_y4pYLH8Ks3F71M1iwmCef-I-p33yB3tpL7LVoFYXQXsTehfOOXavhZEegnVgF3Vht5d8XQTBEJb9utxijXXWUct0hqbuF4WZe8FlMyFStAmcUF0h6DFzkwsppw/fira-code.svg?psid=1&width=1360&height=2048" alt="fira code"></p><p>编程字体推荐: <a href="https://github.com/ProgrammingFonts/ProgrammingFonts" target="_blank" rel="noopener">ProgrammingFonts</a><br>代码编辑器(IDE)开启连字功能的方法: <a href="https://github.com/tonsky/FiraCode/wiki" target="_blank" rel="noopener">How to enable ligatures</a></p><h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><p>再回到第二个问题, 其实问题的本质是: 「当我们设置 字体大小 时, 设置的是字体的宽还是高?」</p><p>经过一番试验测量(使用了<a href="https://getpixelsnap.com/" target="_blank" rel="noopener">PixelSnap</a>测量, 该软件为付费用软件, 但已经包含在了<a href="https://go.setapp.com/invite/johm1" target="_blank" rel="noopener">SetApp</a>中)后发现:</p><ol><li>大部分西文字符在不同字体下, 字体宽度总小于 字体大小 的值(大约为 字体大小 的 0.6 ~ 0.8), 但是高度与 字体大小 一致</li><li>中文字符(包括标点符号,即全角符号)在不同字体基本上宽高均与 字体大小 一致, 此谓 「字正腔圆」</li></ol><p>通过查阅资料<a href="https://en.wikipedia.org/wiki/Typeface_anatomy" target="_blank" rel="noopener">字体解剖</a>得知, 字体大小 所指的就是字体高度, 字体宽度是随字符及字体而变的</p><h2 id="字体类型"><a href="#字体类型" class="headerlink" title="字体类型"></a>字体类型</h2><p>在显示时间时, 秒数时刻在变, 不经过特殊设置, 会明显的发现整个时间字符宽度一直在不停变化, 对强迫症来说是一种煎熬. 这时候, 把字体换成一种「等宽字体」即可解决问题.</p><p>一般设置字体时, 可以设置为某一种特定字体, 比如 <code>Helvetica</code>、<code>微软雅黑</code>, 也可以是某一种字体类型(一种字体类型会包含多种字体, 若指定为字体类型, 则由系统底层自行决定使用哪一个字体渲染). 一般字体类型有:</p><ol><li><a href="https://zh.wikipedia.org/wiki/%E8%A1%AC%E7%BA%BF%E4%BD%93" target="_blank" rel="noopener">衬线体</a> <code>serif</code>: 中文字体中也称「白体」, 此类字体会有很多点缀修饰, 如 宋体、楷体. 衬线体由于多了边角修饰, 会相对美观, 但是也多了信息噪音, 容易使用户产生视觉疲劳, 一般建议仅针对需要着重强调的文字(比如 文章标题)采用该类型的字体. 同时由于衬线体的修饰元素不规则, 会产生锯齿现象, 实际使用时应结合反锯齿技术才能达到较好的显示效果.</li><li><a href="https://zh.wikipedia.org/zh-cn/%E6%97%A0%E8%A1%AC%E7%BA%BF%E4%BD%93" target="_blank" rel="noopener">无衬线体</a> <code>sans-serif</code>: 中文字体中也称「黑体」, 与衬线体相对, 该类字体没有多余的修饰, 如 微软雅黑 等. 无衬线体 适合屏幕中大量使用, 不会导致用户产生视觉疲劳问题.</li><li><a href="https://zh.wikipedia.org/wiki/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93" target="_blank" rel="noopener">等宽字体</a> <code>monospace</code>: 此类字体每个字符宽度一致. 由于东亚的字体的字符本身基本都是等宽的, 所以一般在说等宽字体时, 都是指西文字体. 该字体的可读性较好, 一般在 代码编辑器 及 Terminal 中使用比较普遍.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开发小软件的时候, 发现两个有意思的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何让时间表示形式 &lt;code&gt;aa:bb&lt;/code&gt; 中的 &lt;code&gt;:&lt;/code&gt; 垂直居中显示&lt;/li&gt;
&lt;li&gt;在一个300px的容器中显示10个字符, 如何设置字体大小, 使得字体正好
      
    
    </summary>
    
    
      <category term="知识分享" scheme="https://blog.evecalm.com/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="字体" scheme="https://blog.evecalm.com/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>[知识分享]在浏览器中调整百度网盘播放速度的尝试</title>
    <link href="https://blog.evecalm.com/2020/05/change-playback-rate-in-yunpan.html"/>
    <id>https://blog.evecalm.com/2020/05/change-playback-rate-in-yunpan.html</id>
    <published>2020-05-15T14:12:15.000Z</published>
    <updated>2020-05-16T03:10:45.073Z</updated>
    
    <content type="html"><![CDATA[<p>最近女友使用百度云盘观看学习视频时, 觉得讲师语速太慢, 想调快速度, 然而调速是会员功能. 为了这么一个简单的功能而购买高昂的会员服务, 显然不值得(当然也可以把视频下载下来再用本地播放器倍速, 但又不够方便), 故我做了一番尝试, 最终通过技术手段达成了女友的功能要求. 本文仅做技术研究, 无它, 若有侵犯任何人的权益, 请通过<a href="https://evecalm.com/about/" target="_blank" rel="noopener">关于页面</a>中的联系方式联系我处理. </p><p>当代浏览器已经禁用了 Flash, 故在浏览器中播放视频只能使用 <code>video</code> 标签(若有安装浏览器插件, 则有例外情况, 在此不做讨论), 而调整速度使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate" target="_blank" rel="noopener"><code>playbackRate</code></a> API 即可, 原理上来说很简单.</p><h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><p>右键点击播放器, 使用浏览器的审查功能, 快速定位到了 <code>video</code>, 在开发工具的 Console 中执行代码 <code>$0.playbackRate = 2</code>, 视频播放速度加倍, 一切看似OK.</p><p>然而进一步完善时, 发现情况没这么简单. 在 Console 中执行代码 <code>document.querySelector(&#39;video&#39;)</code> 返回为<code>null</code>, 而非一个DOM节点. 通过查找 video 标签所在的父级标签, 发现了如下图所示的 <code>#shadow-root(closed)</code> 标记. 原来视频标签在 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noopener">Shadow DOM</a> 中, 被隔离开了, 使用JS API还是可以正常访问 Shadow DOM 中内容的.<br><img src="https://bn1305files.storage.live.com/y4mNwrIicpocS0GomtprRAatEHiTOjCxUmRgNlvylm8HkIYsRT82CIfUreq-8D-vneaOMATSK5MO2Fo4SCaUj0n-S9zvLw4YX2cGglmWGbsAR564K8DciFWin8pKr3d1-oX8zRHBP6Xcn1jOkBwArerxvY6CymjA5vx2c1K0hoOk7QZJUje0g-b6CTT-Un3Ej0L4PH3KkHKbwf_j7_7l5u1xQ/baidu-yun-video-dom.png?psid=1&width=441&height=216" alt="shadowRoot"></p><p>但意外情况又发生了, 访问Shadow DOM宿主元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot" target="_blank" rel="noopener"><code>shadowRoot</code></a> 时, 又返回的了 <code>null</code>. 这时才留意到 <code>#shadow-root(closed)</code> 标记中的 <code>(closed)</code>, 查阅资料后发现: <code>closed</code> 为 ShadowRoot 的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode" target="_blank" rel="noopener">mode</a>, 有 <code>open</code> 和 <code>closed</code> 两个值: <code>open</code> 表示 ShadowRoot 可以被JS访问, <code>closed</code> 则相反. 于是还需要进一步尝试.</p><h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><p>基于以上情况, 我便考虑如何将 <code>closed</code> 改为 <code>open</code>. ShadowRoot 的 <code>mode</code> 属性为只读属性, 无法直接修改, 于是猜测应当可以通过劫持原生API来实现. 再次阅资料后, 应证了我的猜想. 可以通过劫持 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow" target="_blank" rel="noopener"><code>attachShadow</code></a> 实现, 于是写下了如下代码进行劫持, 并借助浏览器插件 <a href="https://www.tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a> 完善了一个用户脚本.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalAttachShadow = Element.prototype.attachShadow</span><br><span class="line">Element.prototype.attachShadow = <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    args.mode = <span class="string">'open'</span></span><br><span class="line">    <span class="keyword">return</span> originalAttachShadow.call(<span class="keyword">this</span>, args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完用户脚本反复测试时又发现了新状况: 有时候倍速生效, 有时候又不生效 ):- . 进一步猜测是和网络加载速度有关系, 因为执行脚本用户脚本的时视频资源可能还在加载初始化中. 还要继续尝试.</p><h2 id="第三次也是最后一次尝试"><a href="#第三次也是最后一次尝试" class="headerlink" title="第三次也是最后一次尝试"></a>第三次也是最后一次尝试</h2><p>尝试中, 意外发现若将 <code>Element.prototype.attachShadow = null</code>, 网页不会使用Shadow DOM来创建视频标签了(即视频库做了特性检测, 有fallback方案), 此时可简单快速访问到 <code>video</code> 标签, 于是果断放弃了上述尝试, 最后也无缝完善了本功能.</p><p>这里还有两个小点要提一下:</p><ul><li>劫持 <code>attachShadow</code> 的代码应当在使用该API的代码之前执行, 所以应当在 Tampermonkey 的用户脚本设置中修改 Run At 为 <code>document-start</code></li><li>页面中一开始只有一个占位 <code>video</code> 标签做缓冲, 缓冲完之后才会创建播放视频的 <code>video</code> 标签, 可以通过监听父容器DOM节点的 <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events" target="_blank" rel="noopener"><code>DOMNodeInserted</code></a> 事件来判断播放视频的标签是否创建</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在女友的建议下, 我还给播放器增加了倍速控制按钮, 和网页自带的播放器浑然天成. 也发现了网上有其他更简便的解决方案(均未亲自测验):</p><ol><li>使用最新版火狐浏览器, 在火狐浏览器中右击视频, 即可调整播放速度, 此为浏览器自带功能, 使用方便</li><li>直接在浏览器中执行代码调用播放器使用的视频库 <code>videojs</code> 的API控制速度, 但对不懂代码的人来说, 使用不便且无法随意切换播放速度</li></ol><p>我的思路从原生API出发, 更通用(有时候也会更繁琐), 不受浏览器(需要浏览器支持<a href="https://www.zhihu.com/topic/19802381/hot" target="_blank" rel="noopener">用户脚本</a>, 现代浏览器均已支持)和使用的JS库限制.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近女友使用百度云盘观看学习视频时, 觉得讲师语速太慢, 想调快速度, 然而调速是会员功能. 为了这么一个简单的功能而购买高昂的会员服务, 显然不值得(当然也可以把视频下载下来再用本地播放器倍速, 但又不够方便), 故我做了一番尝试, 最终通过技术手段达成了女友的功能要求.
      
    
    </summary>
    
    
      <category term="知识分享" scheme="https://blog.evecalm.com/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="软件" scheme="https://blog.evecalm.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="浏览器" scheme="https://blog.evecalm.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>[知识分享]博客重启更新</title>
    <link href="https://blog.evecalm.com/2020/05/restart-to-blog.html"/>
    <id>https://blog.evecalm.com/2020/05/restart-to-blog.html</id>
    <published>2020-05-13T16:37:19.000Z</published>
    <updated>2020-05-13T17:32:24.465Z</updated>
    
    <content type="html"><![CDATA[<p>最近看博客的时候, 发现了一个有趣的网站 <a href="https://www.stefanjudis.com/" target="_blank" rel="noopener">Stefan’s web dev journey</a>, 它有一个板块 <a href="https://www.stefanjudis.com/" target="_blank" rel="noopener">Today I Learned(TIL)</a> 专用于分享每日学习到的知识. TIL相关文章内容有长有短, 一篇文章一个知识点, 挺有意义的. 回想自己的博客已经多年未更新, 几近荒废, 若不是域名商定期提醒续费域名, 怕是域名也被收回了. 故想借鉴该网站, 每周不定期写几篇文章记录所学所想, 因为工作较忙, 内容会相对简短一些, 主题会大多于软件使用、前端软件开发为主. 希望自己能重试写博客的习惯, 记录有意义的东西, 不论是否还有人阅读.</p><p>重启博客后的第一篇文字, 就来分享下自己获取资讯使用的软件和网站吧.</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>平时获取资讯主要通过 rss 阅读软件来订阅聚合多个网站的资讯, 个人使用的是 Mac 电脑 + iPhone, 故推荐的软件也都是苹果平台的软件.</p><p>如果你不了解 rss, 可以先阅读下阮一峰的<a href="https://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">这篇介绍文章</a>.</p><ul><li><a href="https://reederapp.com/" target="_blank" rel="noopener">Reeder</a> 我正在使用都 rss 阅读软件, 界面美观, 交互体验及功能都很不错, 付费, 支持iOS和Mac</li><li><a href="https://ranchero.com/netnewswire/" target="_blank" rel="noopener">NetNewsWire</a> 如果不想付费, 也可使用这款<a href="https://github.com/Ranchero-Software/NetNewsWire" target="_blank" rel="noopener">开源</a>免费的 rss 阅读软件, 同样支持 Mac 和 iOS</li></ul><h2 id="资讯网站"><a href="#资讯网站" class="headerlink" title="资讯网站"></a>资讯网站</h2><ul><li><a href="http://jandan.net/" target="_blank" rel="noopener">煎蛋</a> 各种奇趣的非主流新闻, rss 地址 <a href="http://feeds2.feedburner.com/jandan" target="_blank" rel="noopener">http://feeds2.feedburner.com/jandan</a></li><li><a href="https://xinquji.com/" target="_blank" rel="noopener">新趣集</a>  新的产品发现社区, 还聚合了 product hunt 等平台信息, rss 地址 <a href="https://xinquji.com/rss" target="_blank" rel="noopener">https://xinquji.com/rss</a></li><li><a href="https://www.solidot.org/" target="_blank" rel="noopener">Solidot</a> 奇客的资讯，重要的东西, 每日能看到很多简短的科技资讯, rss 地址 <a href="http://feeds2.feedburner.com/solidot" target="_blank" rel="noopener">http://feeds2.feedburner.com/solidot</a></li><li><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎每日精选</a> 知乎每日官方推荐问答, rss 地址 <a href="http://www.zhihu.com/rss" target="_blank" rel="noopener">http://www.zhihu.com/rss</a></li><li><a href="https://tympanus.net/codrops/" target="_blank" rel="noopener">Codrops</a> 一个国外的前端技术博客, 更偏向 CSS, 经常会分享一些炫酷的 CSS 特效, rss 地址 <a href="http://feeds2.feedburner.com/tympanus" target="_blank" rel="noopener">http://feeds2.feedburner.com/tympanus</a></li><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰博客</a> 国内知名的前端大牛博客, rss 地址 <a href="http://www.ruanyifeng.com/blog/atom.xml" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/atom.xml</a></li><li><a href="https://aotu.io/" target="_blank" rel="noopener">Aotu.io「凹凸实验室」</a> 京东 Aotu 团队(跨平台小程序框架 Taro 的开发团队)博客, rss 地址 <a href="https://aotu.io/atom.xml" target="_blank" rel="noopener">https://aotu.io/atom.xml</a></li></ul><p>注: 以上部分 rss 地址为 Google 服务提供, 故可能需要特殊方式才能访问</p><h2 id="如何查找网站的-rss-地址"><a href="#如何查找网站的-rss-地址" class="headerlink" title="如何查找网站的 rss 地址"></a>如何查找网站的 rss 地址</h2><ul><li>找网页上的这个 rss 图标, 一般长这样: <a href="/atom.xml" class="fa fa-rss" style="color: #c78236; padding: 4px; border: 1px solid; border-radius: 4px"></a>, 点这个图标, 即可访问到 rss 地址</li><li>有时候找不到上述图标, 或者网页信息太多不方便找, 可直接在网页上搜索 rss , 若找到, 点击文字即可</li><li>有的网站不会把 rss 直接暴露出来, 那这个时候, 可以右键单击网页, 点击 「查看网页源码」, 在新开到源码界面中, 搜索 <code>rss</code> 或者 <code>xml</code>, 若网站有提供 rss, 则一般会在 源码中的 <code>head</code> 标签中找到</li><li>上述方法都失败了, 网站也的确未提供 rss, 这时候可使用第三方服务来生成 rss 地址, 可用的服务有 <a href="http://fetchrss.com/" target="_blank" rel="noopener">http://fetchrss.com/</a> 、<a href="https://rss.app/" target="_blank" rel="noopener">https://rss.app/</a> 等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看博客的时候, 发现了一个有趣的网站 &lt;a href=&quot;https://www.stefanjudis.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stefan’s web dev journey&lt;/a&gt;, 它有一个板块 &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="知识分享" scheme="https://blog.evecalm.com/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="软件" scheme="https://blog.evecalm.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="分享" scheme="https://blog.evecalm.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>[个人作品]Chrome扩展 My Webrequest</title>
    <link href="https://blog.evecalm.com/2013/11/my-webrequest.html"/>
    <id>https://blog.evecalm.com/2013/11/my-webrequest.html</id>
    <published>2013-11-11T07:05:01.000Z</published>
    <updated>2020-05-13T14:35:18.531Z</updated>
    
    <content type="html"><![CDATA[<p>最近业余写了一款Chrome扩展，可以用来屏蔽请求，强制使用加密连接，浏览盗链图，监控web请求，另外还增加了二维码功能。本扩展支持中英文。从开始开发到完成，共花了两个多月的时间。其实，扩展的核心部分半天时间就写完了，选项页的UI花了半个多月的时间，最后是扩展的英文翻译，拖拖拉拉花了一个多月，自己翻译的，可能还有很多语法错误。</p><p>扩展已经发布至Chrome Web Store，记得使用前阅读下选项页的帮助内容。</p><p><strong><a href="https://chrome.google.com/webstore/detail/my-webrequest/ojodgdaaholkmelbddlhnfdgamohijhk?utm_source=chrome-ntp-icon" target="_blank" rel="noopener" title="进入Chrome Web Store安装">点此安装</a></strong></p><p><img src="https://yqmfyg.bn1.livefilestore.com/y2pRhSy2kcLPf49ik65LU3VZLpiYX7kDqXSro5IMloJahgkTtF3QdmiPX8D1f3TRdVxAU6ezAQsLpG6yRHAd1Mm9HME7Zm0K6ffMhtfTztYYAo/QQ20131115-1.png?psid=1" alt="My webrequest"></p><p>扩展源码托管在github，<a href="https://github.com/evecalm/MyWebrequest" target="_blank" rel="noopener" title="Github">https://github.com/evecalm/MyWebrequest</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近业余写了一款Chrome扩展，可以用来屏蔽请求，强制使用加密连接，浏览盗链图，监控web请求，另外还增加了二维码功能。本扩展支持中英文。从开始开发到完成，共花了两个多月的时间。其实，扩展的核心部分半天时间就写完了，选项页的UI花了半个多月的时间，最后是扩展的英文翻译，拖
      
    
    </summary>
    
    
      <category term="个人作品" scheme="https://blog.evecalm.com/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="应用" scheme="https://blog.evecalm.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="谷歌浏览器" scheme="https://blog.evecalm.com/tags/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>[建站]博客网站减少垃圾留言的简单办法</title>
    <link href="https://blog.evecalm.com/2013/09/easy-way-to-decrease-spam-comments.html"/>
    <id>https://blog.evecalm.com/2013/09/easy-way-to-decrease-spam-comments.html</id>
    <published>2013-09-01T07:42:21.000Z</published>
    <updated>2020-05-13T14:35:18.544Z</updated>
    
    <content type="html"><![CDATA[<p>现在流行的博客程序有wordpress，zblog，typecho等等，使用这些流行的程序搭建网站快速方便，但是垃圾留言也同样随之而来。每天查看和清理成百上千条垃圾评论总是一件让人头疼的事情，虽然有垃圾评论检测插件（如wordpress下的Akismet），但不是能百分百检测正确，总有漏网之鱼，也有被误判的，所以即使使用了垃圾评论检测插件，评论队列（包括垃圾评论队列）还是得仔细看一遍。</p><p>那么，有没有什么好办法减少甚至完全屏蔽掉垃圾评论呢？这先得从垃圾评论的留言机制上说起。</p><p>流行的博客程序都有良好的内部结构，功能模块分的都很清晰。例如有专门负责输出rss的文件，专门负责处理提交的评论的文件等等，这些文件相对于网站的位置都是固定的，并且评论表单中用来标识昵称、邮箱及网站输入框的名称都一样！一般提交一条评论所需要的数据除了昵称、邮箱、网站地址及评论外，还需要知道文章的ID，以及这些数据提交到什么地方。而通过以上介绍，只要知道了你网站地址及博客程序类型，就知道了评论表单中几个输入框的标识名称，RSS的地址（wordpress的是http://域名/feed）也知道了，通过解析网站的rss就知道了文章ID，这些数据要提交到的地方当然就是处理评论的文件的地址（wordpress的是http://域名/wp-comments-post.php）了。所以知道了这些发送一条评论就够了，根本无需打开你的文章页面，甚至无需打开浏览器！对于使用C++、.Net编写的刷评论软件，一分钟刷个上百条评论是没有问题的。由于wordpress在全球范围内非常流行，所以使用wordpress搭建的博客经常会有英文、日文、俄文等外文垃圾留言的光顾。</p><p>现在，既然知道了垃圾评论的留言机制，那就可以对症下药了！最简单的办法就是让刷评论的软件找不到评论的提交地址！步骤如下:</p><ol><li><p>将网站根目录下的<code>wp-comments-post.php</code>文件复制一份，随便改一个名字（如abc.php），文件后缀不能改。</p></li><li><p>修改<code>wp-comments-post.php</code>文件，在文件第一行<code>&amp;lt;?php</code> 后换行插入如下代码:</p></li></ol><p><code>die();</code></p><ol start="3"><li>修改当前主题的<code>comments.php</code>文件，该文件位置在<code>[网站根目录]/wp-content/themes/[主题名]</code>,在该文件中找到<code>wp-comments-post.php</code>，将其改成第一步改后的那个名字（这里就是abc.php了）。</li></ol><p>使用改方法能屏蔽掉大部分的垃圾评论。需要注意的是wordpress升级会在网站根目录下再次生成<code>wp-comments-post.php</code>文件，升级后需要将步骤1和2重新操作一遍；切换主题后应按步骤3操作一遍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在流行的博客程序有wordpress，zblog，typecho等等，使用这些流行的程序搭建网站快速方便，但是垃圾留言也同样随之而来。每天查看和清理成百上千条垃圾评论总是一件让人头疼的事情，虽然有垃圾评论检测插件（如wordpress下的Akismet），但不是能百分百检
      
    
    </summary>
    
    
      <category term="建站" scheme="https://blog.evecalm.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="技巧" scheme="https://blog.evecalm.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="网站" scheme="https://blog.evecalm.com/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="垃圾留言" scheme="https://blog.evecalm.com/tags/%E5%9E%83%E5%9C%BE%E7%95%99%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>[建站]博客域名已重定向至blog.evecalm.com</title>
    <link href="https://blog.evecalm.com/2013/07/blog-domain-modified.html"/>
    <id>https://blog.evecalm.com/2013/07/blog-domain-modified.html</id>
    <published>2013-07-22T15:22:26.000Z</published>
    <updated>2020-05-13T14:35:18.544Z</updated>
    
    <content type="html"><![CDATA[<p>由于个人的发展，主域名将做它用，届时会发布一些公共服务，敬请期待。原博客内容已重定向至二级域名blog.evecalm.com，目前您仍可使用以前的地址访问，过一段时间可能会取消重定向。</p><p>在这样一个喧嚣浮躁的社会，世界以及内心的宁静显得遥不可及。故向大家推荐一个网站，聆听大自然的声音，静享片刻安宁，放松自我。该网站和本人无关啊。</p><p><a href="http://www.calm.com/" target="_blank" rel="noopener" title="calm.com">http://www.calm.com/</a>(请使用支持HTML5的浏览器，如Chrome，Firefox等)</p><p><img src="http://ww3.sinaimg.cn/large/6d442bf5gw1e6w0ciqf7mj20hs0daab3.jpg" alt="安静"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于个人的发展，主域名将做它用，届时会发布一些公共服务，敬请期待。原博客内容已重定向至二级域名blog.evecalm.com，目前您仍可使用以前的地址访问，过一段时间可能会取消重定向。&lt;/p&gt;
&lt;p&gt;在这样一个喧嚣浮躁的社会，世界以及内心的宁静显得遥不可及。故向大家推荐一
      
    
    </summary>
    
    
      <category term="建站" scheme="https://blog.evecalm.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="网站" scheme="https://blog.evecalm.com/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="域名" scheme="https://blog.evecalm.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>[个人作品]综合搜索</title>
    <link href="https://blog.evecalm.com/2013/04/union-search.html"/>
    <id>https://blog.evecalm.com/2013/04/union-search.html</id>
    <published>2013-04-14T15:09:47.000Z</published>
    <updated>2020-05-13T14:35:18.531Z</updated>
    
    <content type="html"><![CDATA[<p>工作之后，有了压力，一切不再像以前一样简单轻松，人也变得倦怠，博客也因此停止更新许久。</p><p>目前的工作是在做Web开发，PHP、JS、CSS涉及的很多，于是业余便写下了这么一个综合搜索的小工具来练练手。经测试，已兼容IE7，IE8，最新版火狐及Chrome。</p><p>应用地址：<a href="http://app.evecalm.com/search" target="_blank" rel="noopener">http://app.evecalm.com/search</a></p><p><img src="http://ww4.sinaimg.cn/large/a74ecc4cjw1e3pjjbp0l3j.jpg" alt="union search"></p><p>应用特色：</p><ol><li><p>支持多语言切换，目前支持中英</p></li><li><p>支持多种类型的搜索包括普通搜索、音乐、视频、图片、问答、地图、购物、文</p></li><li><p>支持自动搜索自动提示(使用百度及阿里的数据</p></li><li><p>使用HTML5离线存储,对于支持HTML5的浏览器,本应用的加载速会得到度急速提升</p></li></ol><p>使用说明：</p><ol><li>设置语言</li></ol><p>点击右上角的“English/中文”来切换应用语言，第一次进入时应用会依据浏览器的语言的自动选择</p><ol start="2"><li>设置背景图片</li></ol><p>点击右上角的“☸”来设置背景图片，推荐上<a href="http://desk.zol.com.cn/" target="_blank" rel="noopener">中关村壁纸</a>找适合自己屏幕分辨率的图片，将图片的地址复制到输入框，点击“OK”即可</p><ol start="3"><li><p>快捷键</p><ul><li><p>HOME键(如果光标不在搜索输入框则可以快速定位到搜索输入框</p></li><li><p>TAB键(切换搜索引擎,需光标在搜索输入框</p></li><li><p>SHIFT+TAB(切换搜索类型,需光标在搜索输入框)</p></li></ul></li><li><p>其他</p></li></ol><p>在搜索框输入一个空格，按回车可以进入当前搜索引擎的主页</p><p>使用中如有任何问题或者有什么好的建议，请到本页反馈。</p><p>另，由于平时使用谷歌搜索比较多，通过加密方式可以正常访问<a href="https://www.google.com.hk/" target="_blank" rel="noopener">谷歌</a>，但是却经常无法打开搜索结果，因为谷歌的搜索结果均需要再经过其服务器跳转一次。于是我写了一个小扩展，去掉搜索结果链接上的二次跳转，点击搜索结果就可以直接进入对应页面。顺便将“网页快照”的链接改为加密链接，如果你可以使用加密方式查看谷歌快照的话，这会方便许多。该扩展支持Chrome及火狐。Chrome用户请先下载下面的扩展(右击链接，选择链接另存为)，再打开Chrome的扩展页(在地址栏输入<a href="chrome://extensions/">chrome://extensions/</a>)，将下载的扩展拖入改页面即可安装。火狐用户需安装扩展<a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank" rel="noopener">Greasemonkey</a>后再点击下面的扩展链接才可安装。</p><p>扩展地址：<a href="http://app.evecalm.com/search/googlelink.user.js" target="_blank" rel="noopener">http://app.evecalm.com/search/googlelink.user.js</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作之后，有了压力，一切不再像以前一样简单轻松，人也变得倦怠，博客也因此停止更新许久。&lt;/p&gt;
&lt;p&gt;目前的工作是在做Web开发，PHP、JS、CSS涉及的很多，于是业余便写下了这么一个综合搜索的小工具来练练手。经测试，已兼容IE7，IE8，最新版火狐及Chrome。&lt;/p
      
    
    </summary>
    
    
      <category term="个人作品" scheme="https://blog.evecalm.com/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="应用" scheme="https://blog.evecalm.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="搜索" scheme="https://blog.evecalm.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[个人作品]书签分割线 &amp; 特殊符号大全</title>
    <link href="https://blog.evecalm.com/2012/10/bookmark-sort-special-chars.html"/>
    <id>https://blog.evecalm.com/2012/10/bookmark-sort-special-chars.html</id>
    <published>2012-10-03T08:48:32.000Z</published>
    <updated>2020-05-13T14:35:18.531Z</updated>
    
    <content type="html"><![CDATA[<p>博客已经沉寂很久了，这段时间我在忙着毕业设计、工作等等，如今已经安然工作了。感谢大家一直以来对本站的支持，在此我小小的宣布下：我复出了！</p><p>工作单调而又枯燥，不甘寂寞的我自然不愿如何颓废下去，业余学习了PHP、CSS、JS，并制作了几个小工具，其中之一便是这个书签整理工具。本应用的创意源自<a href="http://separatethis.com/" target="_blank" rel="noopener">separatethis.com</a>。使用本工具可以让你的书签更加有条理（前提是你也和我一样有数十个书签），可以达到如下效果：</p><p><img src="http://app.evecalm.com/bookmark/img/03.jpg" alt="书签整理"></p><p>应用地址：<a href="http://app.evecalm.com/bookmark" target="_blank" rel="noopener">http://app.evecalm.com/bookmark</a></p><p>使用方法很简单，将网页存入书签并放置在合适的位置即可，还可以先自定义分割线再存入书签。</p><p>本应用同时还提供了二百多个有趣的字符，您可以用来设置书签分割线，也可作他用。以下是部分特殊符号的截图：</p><p><img src="http://m1.img.libdd.com/farm5/2012/1003/16/0FC4CBC334E691C079FB0119832F5E7FE2960E5EF698_448_297.JPEG" alt="特殊符号大全"></p><p>希望本应用给您带来了便利，祝您使用愉快^^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客已经沉寂很久了，这段时间我在忙着毕业设计、工作等等，如今已经安然工作了。感谢大家一直以来对本站的支持，在此我小小的宣布下：我复出了！&lt;/p&gt;
&lt;p&gt;工作单调而又枯燥，不甘寂寞的我自然不愿如何颓废下去，业余学习了PHP、CSS、JS，并制作了几个小工具，其中之一便是这个书
      
    
    </summary>
    
    
      <category term="个人作品" scheme="https://blog.evecalm.com/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="应用" scheme="https://blog.evecalm.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="书签整理" scheme="https://blog.evecalm.com/tags/%E4%B9%A6%E7%AD%BE%E6%95%B4%E7%90%86/"/>
    
      <category term="特殊符号" scheme="https://blog.evecalm.com/tags/%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>[思想]为什么要有大学</title>
    <link href="https://blog.evecalm.com/2011/12/why-threre-is-a-university.html"/>
    <id>https://blog.evecalm.com/2011/12/why-threre-is-a-university.html</id>
    <published>2011-12-29T07:16:46.000Z</published>
    <updated>2020-05-13T14:35:18.537Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://yqmfyg.bn1.livefilestore.com/y2pH6lb8kEoNx-rsgn8GR490aPcrp00ftH2xb4a8XlmECyi32-3jubwvYG4_9lOfzadZsc2nlcr4PwDxcw5dQwP2hjhZQSvNBQVDts31VwLljw/whyuniversity.jpg" alt=""></p><p>当欧洲中世纪末期出现大学的时候，大学无非是神学院的变种。当欧洲步入现代之际，洪堡的改革，不仅让大学世俗化，而且种下了职业化的种子。虽然，此时的大学，依然强调人格培养和心灵的完善。但只要大学走下神坛，就势必要跟社会融合，回应社会的需要。尽管大学在很长一段时间里，还是文理学院当家，并没有根据社会的分工设置专业。但文理学院的毕业生，毕竟都进入了社会，能在社会上找到自己的职业。毕业生固然有从事所学“专业”的，但越来越多的人，从事的职业，跟专业并没有直接关系，他们从大学得到的只是学养和素质。</p><p>当然，随着世界现代化的进程，大学仅仅作为人格和素质教育的基地，是远远不能符合社会需要了，必须在基本的文理教育之外，有一些专业性的知识和技能。随着工、商、农、医和法科的兴盛，大学逐渐面目皆非，越来越像职业技术学院，专业分工越来越细，对专业知识和职业技能的要求越来越多。一度存在的社会主义阵营，走得最远，在这些国家，大学基本上都变成了苏联式的专业学院。除了一些政治课学习之外，就是通过狭窄的专业口径，迅速把学生培养成可以从事某一专业的技术人才，很类似一台大机器上的齿轮和螺丝钉。</p><p>无疑，走到苏式学院的境地，大学的职业化实际上异化了，从培养人，变成制造国家机器的零件。这就是所谓苏式大学和美式大学的分野，好听一点地说，是专才教育和通才教育的不同。从本质上讲，前者的目的是国家，而后者的目的是个人，反映的是政治和社会制度的不同。其实，以培养人为目的的教育，从长远看，更符合国家的利益。冷战时代苏美竞争中苏联的失败，实际上也是苏式教育的失败。</p><p>当今的世界，意识形态已经退位。中国和以美国为首的西方的所谓对立，除了一点残存的意识形态碎片之外，实际上是利益之争。即使从国家利益考量，中国大学的变革，理应回归美式教育的方向。但是，在中国，基于意识形态顾虑，却使得这样的变革半途而废，只学了一点皮相的内容。在官僚政治的主导下，中国的大学，不仅没有了培养人的目标，连以往的国家目标，也变得模糊。大学的规模在迅速扩展，但大学生的素质却在急速下降，甚至连几所顶尖的所谓“研究型”大学也是如此。有些大学，专业设置完全跟着市场走，市场热什么，就设置什么专业，有的专业或者专业方向，几乎就是社会和市场某种职位的转义，比如市场营销、劳动人事，甚至出现纪检和城管专业。但是，大学培养出来的人，往往既没有人格素养，也没有专业技能。上不着天，下不挨地，悬在半空，百无一用。</p><p>人的培养，无疑是大学的目的。大学里出来的，应该是综合发展、人格健全的人。这样的人，当然也得走向社会，走向市场，找到自己喜欢的工作，寻出一条适合自己发展的路径。所以，大学肯定会有职业化的内涵，传统的文理学院，注定没有工程、医疗、法学和商科兴盛。但是，大学却不是职业技术学院，不应把技术培训作为主要的内容。大学的职业化成分，只是为学生日后的职业训练打基础，让他们有一个更高的起点，具有科学化做事的素质，与人合作的基本能力。在很多情况下，人在大学里学什么专业，不见得就非得是为了日后从事跟这个专业有关的工作，可能仅仅是满足自己对某些知识和理论的爱好。所以，凡是只能从事技术培训的大学，都应该回归本位，改成技术学院或者学校。那些连技术培训都做不好的大学，就应该撤销。所谓研究型大学，如果连本科生都培养不好，就应该退回去，撤掉自己众多的博士点和硕士点，老老实实办专科和本科。</p><p>中国的大学，正在非常迅速的发展中迷失自己，丢掉了苏式的学院，也没有得到美式的大学，仅仅沦落为一个为利益集团牟利的场所，一种官办垄断市场里的学店。这样的大学，其实既不是大学，也不是别的什么东西，如果非要定义的话，有两个中国字庶几近之：累赘。</p><p>以上文字转载自<a href="http://blog.sina.com.cn/s/blog_4ac7a2f50102dree.html" target="_blank" rel="noopener">张鸣的博客。</a></p><p>个人关于大学的低见：大学让我很失望。大学没有解答我的疑惑，高中就很迷茫的我，到了大学变得更加的困惑。大学的目的仅仅只让大家可以找到一份工作，能为我朝时常拿出来炫耀的一堆数字作出贡献，和职校无异，甚至还不及职校。而我朝教育部最近也扬言要取消就业率低的专业，这意味着哲学、文学、历史等文化思想类专业将很有可能被取消，国人也将变得更加愚昧而缺乏思想。大学的教育可以让人觉得高人一等，在各个方面上都有优势，人生将平步青云，这和封建王朝的科举制度有着异曲同工之妙（你的学历越高，证书越多，这种感觉应该就更甚）。其实，仔细看看“现代”社会，并非真正进入了“初级文明”，依旧停留在封建社会，只是表现形式不同罢了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://yqmfyg.bn1.livefilestore.com/y2pH6lb8kEoNx-rsgn8GR490aPcrp00ftH2xb4a8XlmECyi32-3jubwvYG4_9lOfzadZsc2nlcr4PwDxcw5dQwP2hj
      
    
    </summary>
    
    
      <category term="思想" scheme="https://blog.evecalm.com/categories/%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="大学" scheme="https://blog.evecalm.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="思想" scheme="https://blog.evecalm.com/tags/%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
</feed>
